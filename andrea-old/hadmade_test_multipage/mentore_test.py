# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mentore.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

### Idea: this is the program executed as main. It is a mainwindow adapting it buttons and stuff when the user
### clicks on things. In order to program the rest, we design all the other windows as mainwindows so that we have
### the model for the elements that the mainwindow needs to feature/show.


from PyQt5 import QtCore, QtGui, QtWidgets
from mentorePalette import mentorePaletteSetter
import mentore
import addMentore


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super(MainWindow, self).__init__()

        self.setObjectName("MainWindow")
        self.resize(800, 480)

        self.setWindowIcon(QtGui.QIcon('images/robot_logo2.svg'))

        palette = QtGui.QPalette()
        palette = mentorePaletteSetter(palette)
        self.setPalette(palette)

        #self.mentoreLayout = ...

        self.mainLayout = mentore.mainLayout(self)
        self.addLayout = addMentore.addLayout(self)

        #self.currentLayout = self.mainLayout
        self.updateLayout("main")

     #   self.connect_events()

    def updateLayout(self, layout: str):
        if layout == "main":
            self.currentLayout = self.mainLayout
        elif layout == "add":
            self.currentLayout = self.addLayout
        self.show()


    #def connect_events(self):

        # Add TODO push button
        #self.add_pb.clicked.connect(lambda: addMentore.addWindow().show())


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mentoreWindow = MainWindow()

    sys.exit(app.exec_())
