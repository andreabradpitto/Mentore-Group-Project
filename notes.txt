Done:

1. We designed Page1.ui and Page2.ui Files first using the 'Designer tool', and generated their .py files.
2. To link the buttons with the next pages, we had to edit the python code.
3. We copied the code of Page2.py, as a new 'class' inside the Page1.py file.
4. Now our Page1.py is the only file we need.
5. In this file, we have 2 classes, representing 2 separate windows.
6. We've also designed the Q-A page using the 'designer tool'

Working Now:

1. Click on '+' in the first window, this will bring you to the second window where you can add a new class.
2. Enter the class name inside the text box, and click on 'Add', this will close this window and will bring 
you back to the first main window.

To be done:

1. Design and link the 'Browse' page with the Browse button on the Main Window.
2. Link the 'Q-A' page with the class selected by the user either from the recently used, or from the browser.


Meeting Discussion Notes:

1. First page should focus on selecting / browsing the Concept rather than add concept,sentence, question options. - Ok
2. After this selection, the teacher can choose to add a sentence and question/answer - Ok
3. Maybe an option for chooisng if this sentence iis positve . negative
3. Q/A page should only have an option of entering one q/a at a time
4. Maybe one window at a time will be better, but why do you think a separate window is better? - Yes, its better to update the contents rather than closing an opening again
5. Having separate .py files for each page is a good idea
6. Ubuntu / Windows? Andrea 
7. Open an ontology? No.
8. Color

Extra to be done maybe:
9. Can we edit the ontology? Sure. Can we remove a class? Can we remove a q/a?


HOW TO:
How to read the subclasses from .owl file and create buttons / dropdown for 'Browse'.?

Main Window

1. A sentence which shows that this is the page where you can either select a class that is already present OR you can add a new class, press help for info
2. Button1: Selecting a class that is already present
3. Button2: Adding a new class (+ Button)
4. Something as a feedback to show that the class is selected / added + selected
5. Help button on the top bar having some documentation

Button1 window: Browser for selecting from the classes already present
After selecting the class, goes on to the 'Add sentence / question' window

Button2 window: Main window updates and have all the contents on the 'AddConcept' page designed by Andrea.
After entering the concept, Ok, After selecting the class, goes on to the 'Add sentence / question' window

---

Andrea's updates:

bug list:
- at the moment page2 "overwrites" mentore (mainWindow), it should be another window in foreground.
Current implementation also does not work when getting beck to the main window.
Also, moved main windows "warp" back to the predefined location
- consider creating a style sheet
- fonts too big/unreadable (does it happen also on your laptops? We should check if this is machine-dependant)

brainsotrming:
We should have a main window in which you pick an .owl file (-> outsource to native file explorer), and as
far as I understood we are restrained to work inside the "SchoolSubject" class in any case.
Here we can add concepts (i.e. subclasses of SchoolSubject), sentences (positive/negative tag need to be distinguished),
and questions/answers (ask and wait ?). Let's forget for now about audio feature.
Then, my idea is to have a brief description in the main window (as you have done), and 3 buttons (+ the "browse file" one):
- add concept
- add sentence (this then triggers another 2 button choice, i.e. add positive or add negative)
- add question & answers
so we should be good with adding stuff. Each choice should then open a separte window to allow inserting stuff. Before the
user clicks on any of these 3 buttons, there should be only one window I think.
If the user clicks on one of these 3 before picking a file, an error or warning message is fired.
But what if we want to edit existing concepts/sentences/etc. ? maybe it is out of
what we are asked to do, but we should ask Carmine. If we do not implement that, we should prompt to the user, before
they finish their job, an alert like "are you sure you want to save these edit(s)?" so that they avoid mistakes, hopefully.
But I think that we should first just focus on the addition part, and then care about this if needed.

appunto mio: prova = palette.brightText()

Post-Carmine meeting important points:
- we access the single .owl file directly
- our schoolSubject subclass is created/accessed at start. We cannot go outside of this topic
- we should implement subclasses of classes inside schoolSubject
- provide "remove concept" feature (not a priority but nice)